函数的渐进增长
    判断一个研发的效率时，函数中的常数和其他次要项常常可以忽略，而更应该关注主项（最高阶项）的阶数。

算法的时间复杂度：
    语句总的执行次数：T(n)
    问题规模：n
    为的是分析T(n)随n的变化情况来确定T(n)的数量级
    记作：T(n) = O(f(n))
    随着n的增大，T(n)增长最慢的算法为最优算法。

推倒大O阶：
    1. 常数1取代所有的加法常数
    2. 保留最高阶项
    3. 如果最高阶项存在且不是1，用这个最高阶项除以这个项的常数

常数阶：与问题的大小无关(n的多少)，执行时间恒定的算法，我们称之为具有O(1)的时间复杂度，又叫常数阶。

线性阶：

对数阶：

平方阶：

常见的时间复杂度：

最坏情况与平均情况：

算法空间复杂度：
